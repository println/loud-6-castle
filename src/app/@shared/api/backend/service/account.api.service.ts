/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';
import { Account } from '../model/account';

import { AccountDto } from '../model/accountDto';
import { AccountRegisterDto } from '../model/accountRegisterDto';
import { IssueToken } from '../model/issueToken';
import { PageAccountDto } from '../model/pageAccountDto';
import { Pageable } from '../model/pageable';
import { PageSession } from '../model/pageSession';
import { RoleDto } from '../model/roleDto';
import { Session } from '../model/session';
import { UpdateLoginDto } from '../model/updateLoginDto';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import RoleEnum = Account.RoleEnum;

@Injectable()
export class AccountApiService {
  protected basePath = 'http://localhost:8085';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   *
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public blockAccount(id: string, observe?: 'body', reportProgress?: boolean): Observable<AccountDto>;
  public blockAccount(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AccountDto>>;
  public blockAccount(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AccountDto>>;
  public blockAccount(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling blockAccount.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<AccountDto>(
      'put',
      `${this.basePath}/api/v1/account/${encodeURIComponent(String(id))}/block`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param body
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public changeRole(body: RoleDto, id: string, observe?: 'body', reportProgress?: boolean): Observable<AccountDto>;
  public changeRole(
    body: RoleDto,
    id: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<AccountDto>>;
  public changeRole(
    body: RoleDto,
    id: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<AccountDto>>;
  public changeRole(
    body: RoleDto,
    id: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling changeRole.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling changeRole.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<AccountDto>(
      'put',
      `${this.basePath}/api/v1/account/${encodeURIComponent(String(id))}/role`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param search
   * @param pageable
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAll3(
    search?: string,
    pageable?: Pageable,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<PageAccountDto>;
  public getAll3(
    search?: string,
    pageable?: Pageable,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<PageAccountDto>>;
  public getAll3(
    search?: string,
    pageable?: Pageable,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<PageAccountDto>>;
  public getAll3(
    search?: string,
    pageable?: Pageable,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (search !== undefined && search !== null) {
      queryParameters = queryParameters.set('search', <any>search);
    }
    if (pageable !== undefined && pageable !== null) {
      queryParameters = queryParameters.set('pageable', <any>pageable);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<PageAccountDto>('get', `${this.basePath}/api/v1/account`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   *
   * @param search
   * @param pageable
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAll4(
    search?: string,
    pageable?: Pageable,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<PageAccountDto>;
  public getAll4(
    search?: string,
    pageable?: Pageable,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<PageAccountDto>>;
  public getAll4(
    search?: string,
    pageable?: Pageable,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<PageAccountDto>>;
  public getAll4(
    search?: string,
    pageable?: Pageable,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (search !== undefined && search !== null) {
      queryParameters = queryParameters.set('search', <any>search);
    }
    if (pageable !== undefined && pageable !== null) {
      queryParameters = queryParameters.set('pageable', <any>pageable);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<PageAccountDto>('get', `${this.basePath}/api/v1/account/`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getById1(id: string, observe?: 'body', reportProgress?: boolean): Observable<AccountDto>;
  public getById1(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AccountDto>>;
  public getById1(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AccountDto>>;
  public getById1(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getById1.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<AccountDto>(
      'get',
      `${this.basePath}/api/v1/account/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRoles(observe?: 'body', reportProgress?: boolean): Observable<RoleEnum[]> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<RoleEnum[]>('get', `${this.basePath}/api/v1/account/roles`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public register1(body: AccountRegisterDto, observe?: 'body', reportProgress?: boolean): Observable<AccountDto>;
  public register1(
    body: AccountRegisterDto,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<AccountDto>>;
  public register1(
    body: AccountRegisterDto,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<AccountDto>>;
  public register1(body: AccountRegisterDto, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling register1.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<AccountDto>('post', `${this.basePath}/api/v1/account`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public register2(body: AccountRegisterDto, observe?: 'body', reportProgress?: boolean): Observable<AccountDto>;
  public register2(
    body: AccountRegisterDto,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<AccountDto>>;
  public register2(
    body: AccountRegisterDto,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<AccountDto>>;
  public register2(body: AccountRegisterDto, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling register2.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<AccountDto>('post', `${this.basePath}/api/v1/account/`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public unblockAccount(id: string, observe?: 'body', reportProgress?: boolean): Observable<AccountDto>;
  public unblockAccount(
    id: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<AccountDto>>;
  public unblockAccount(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AccountDto>>;
  public unblockAccount(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling unblockAccount.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<AccountDto>(
      'delete',
      `${this.basePath}/api/v1/account/${encodeURIComponent(String(id))}/block`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param body
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateCredentials(
    body: UpdateLoginDto,
    id: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<AccountDto>;
  public updateCredentials(
    body: UpdateLoginDto,
    id: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<AccountDto>>;
  public updateCredentials(
    body: UpdateLoginDto,
    id: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<AccountDto>>;
  public updateCredentials(
    body: UpdateLoginDto,
    id: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling updateCredentials.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateCredentials.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<AccountDto>(
      'put',
      `${this.basePath}/api/v1/account/${encodeURIComponent(String(id))}/login`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  getAllIssues(id: string): Observable<IssueToken[]> {
    let headers = this.defaultHeaders;

    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.request<IssueToken[]>(
      'get',
      `${this.basePath}/api/v1/account/${encodeURIComponent(String(id))}/issues`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
      }
    );
  }

  getAllSessions(id: string): Observable<Session[]> {
    let headers = this.defaultHeaders;

    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.request<Session[]>(
      'get',
      `${this.basePath}/api/v1/account/${encodeURIComponent(String(id))}/sessions`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
      }
    );
  }

  getUser(id: string): Observable<User> {
    let headers = this.defaultHeaders;

    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    return this.httpClient.request<User>(
      'get',
      `${this.basePath}/api/v1/account/${encodeURIComponent(String(id))}/user`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
      }
    );
  }
}
